name: Docker Image CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
env:
  REGION: us-east-1
  ECR_REGISTRY_ID: 553885929720
  AWS_ASSUMED_ROLE_ARN: arn:aws:iam::553885929720:role/tf_nodereal_prod_ecr_cicd_deployment_assume_role
  IMAGE_ARM_SUPPORT: true

jobs:
  build:
    runs-on: [self-hosted,qa-infra-k8s]
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          role-to-assume: ${{ env.AWS_ASSUMED_ROLE_ARN }}
          aws-region: ${{ env.REGION }}
          role-duration-seconds: 1800
      - name: Set up Docker Context for Buildx
        shell: bash
        id: buildx-context
        run: |
          docker context create builders
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64,linux/arm64
          endpoint: builders
      - name: Build, tag, and push image to Amazon ECR
        env:
          ARM64_SUPPORT: ${{ env.IMAGE_ARM_SUPPORT }}
        run: |
          IMAGE_NAME="${ECR_REGISTRY_ID}.dkr.ecr.${REGION}.amazonaws.com/${GITHUB_REPOSITORY#*/}:${GITHUB_SHA}"
          aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY_ID}.dkr.ecr.${REGION}.amazonaws.com
          aws ecr --region $REGION describe-repositories --registry-id $ECR_REGISTRY_ID --repository-names ${GITHUB_REPOSITORY#*/} || aws ecr --region $REGION create-repository --registry-id $ECR_REGISTRY_ID --repository-name ${GITHUB_REPOSITORY#*/}
          aws ecr --region $REGION set-repository-policy --registry-id $ECR_REGISTRY_ID --repository-name ${GITHUB_REPOSITORY#*/} --policy-text file:///home/runner/repo-access-permissions.json
          if [[ "$ARM64_SUPPORT" == "true" ]]; then
            docker buildx build --platform linux/amd64,linux/arm64 --build-arg GIT_TOKEN=$${{ secrets.GO_MODULES_TOKEN }} -t $IMAGE_NAME --push .
          else
            docker buildx build --platform linux/amd64 --build-arg GIT_TOKEN=${{ secrets.GO_MODULES_TOKEN }} -t $IMAGE_NAME --push .
          fi
          docker buildx imagetools inspect $IMAGE_NAME